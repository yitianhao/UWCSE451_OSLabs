Question #1
Why might an application prefer using malloc and free instead of using sbrk directly?
- It's always good to have some "interface" that is easy to use for users.
- We don't want user to have access to the virtual memory, etc.

Question #2:
Explain how the file descriptors of ls and wc change when the user types ls | wc
in xk's shell.
1. The parent (shell) first creates a pipe which creates 2 new file descriptors.
2. Then the parent will fork 2 new children, so the children processes can inherit their
parent's file descriptors.
3. Each of the child will execute the program and transfer data using pipe:
   child A will execute ls, call dup to duplicate the write end of the pipe
   child B will execute wc, call dup to duplicate the read end of the pipe

Question #3:
When a syscall completes, user-level execution resumes with the instruction
immediately after the syscall.  When a page fault exception completes, where does
user-level execution resume?
It will re-try the instruction that caused the page fault previous.

Question #4:
How should the kernel decide whether an unmapped reference is a normal stack
operation versus a stray pointer dereference that
should cause the application to halt? What should happen, for example, if
an application calls a procedure with a local variable that is an array
of a million integers?
We will check the address. The benchmark is the stack address should in the bound
of [SZ_2G - 10 * PGSIZE, SZ_2G)

Question #5:
Is it possible to reduce the user stack size at
run-time (i.e., to deallocate the user stack when a procedure with a
large number of local variables goes out of scope)?  If so, sketch how that
might work.
???

Question #6:
The TLB caches the page table entries of recently referenced
pages.  When you modify the page table entry to allow write access,
how does xk ensure that the TLB does not have a stale version of the cache?
During copy-on-write, we call vspaceinvalidate which will rebuild the user's virtual
address space (update TLB).

Question #7
For each member of the project team, how many hours did you
spend on this lab?
Yitian Hao: 12.5h
Kelvin Fang: